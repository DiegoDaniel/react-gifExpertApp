{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catsPrev","type","value","onChange","target","getGifs","category","a","endpoint","encodeURI","fetch","resp","json","data","gifs","map","elem","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAoC,EAAjCC,WAAkC,IAAtBC,EAAqB,EAArBA,cAAqB,EAExBC,mBAAS,IAFe,mBAErDC,EAFqD,KAEzCC,EAFyC,KAkB5D,OACI,sBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAMlB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAnBiB,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEyCC,UAAWH,GAFpD,8DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAQ,CACJC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZC,IAAG,UAAEH,EAAKI,cAAP,aAAE,EAAaC,iBAAiBF,QAZxB,kBAgBZL,GAhBY,4CAAH,sDCCPQ,EAAc,SAAC,GAAsB,IAAnBJ,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAElC,OACI,sBAAKI,UAAU,yCAAf,UACI,qBAAKC,IAAML,EAAMM,IAAMP,IACvB,4BAAKA,QCHJQ,EAAU,SAAC,GAAoB,IAAjBpB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPzB,EAASC,GACJyB,MAAM,SAAEjB,GACLe,EAAS,CACLhB,KAAMC,EACNa,SAAS,SAGtB,CAACrB,IAEGsB,EDd0BI,CAAc1B,GAAlCc,EAF0B,EAE/BP,KAAac,EAFkB,EAElBA,QAErB,OACI,qCACI,6BAAMrB,IACJqB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEIH,EAAOL,KAAK,SAAEkB,GACV,OAAO,cAAC,EAAD,eAKEA,GAJCA,EAAIhB,aEqBnBiB,EAjCM,WAAO,IAAD,EAEW1C,mBAAU,CAAC,cAFtB,mBAElBF,EAFkB,KAENC,EAFM,KAgBzB,OACI,qCACE,8CACA,cAAC,EAAD,CACEA,cAAgBA,IAClB,uBACA,6BACID,EAAWyB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CACEA,SAAWA,GACLA,Y,MCvBtB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9d1db067.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { categories, setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( catsPrev => [ inputValue, ...catsPrev ] );\r\n            setInputValue('');\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n          <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputValue }\r\n            />\r\n        </form>\r\n    )\r\n\r\n    \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n        \r\n    const endpoint = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=5&api_key=zquzVorMuvnufRlCnG1ejxGifEr6BW7v`;\r\n\r\n    const resp = await fetch( endpoint );\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( elem => {\r\n        return ({\r\n            id: elem.id,\r\n            title: elem.title,\r\n            url: elem.images?.downsized_medium.url\r\n        });\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react' //, { useEffect, useState }\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n            //renombro\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                { \r\n                images.map( ( img ) => {\r\n                    return <GifGridItem \r\n                        key={ img.id }\r\n                        //Se puede hacer spread de CADA UNO de los valores de img\r\n                        //Para enviar al componente, en lugar de hacer id={img.id},, title={img.title},\r\n                        //El spread devuelve todos los valores del objeto.\r\n                        { ...img } />;\r\n                })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( ( gifs ) => {\r\n                setstate({\r\n                    data: gifs,\r\n                    loading: false\r\n                });\r\n            });    \r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState( ['One Punch'] );\r\n\r\n  // const handleAdd = () => {\r\n  //   //Esta forma no da errores, pero me gustÃ³ mas la del profesor.\r\n  //   /*setCategories( categories.concat('Text') );*/\r\n    \r\n  //   //El spread es para 'Extraer TODOS los valores del array'.\r\n  //   /*setCategories( [...categories, 'HunterXHunter'] );*/\r\n\r\n  //   //Ademas, el set tiene como callback el ESTADO ANTERIOR: (Esto va a servir)\r\n  //   setCategories( catsPrev => [...catsPrev, 'HunterXHunter'] );\r\n\r\n  // }\r\n\r\n  return (\r\n      <>\r\n        <h2>GifExpertApp</h2>   \r\n        <AddCategory \r\n          setCategories={ setCategories }/>\r\n        <hr />\r\n        <ol>\r\n          { categories.map( category => \r\n              <GifGrid\r\n                category={ category }\r\n                key={ category } />\r\n          )}\r\n        </ol>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}